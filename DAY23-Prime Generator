def sieve_of_eratosthenes(limit):
    is_prime = [True] * (limit + 1)
    p = 2
    while p * p <= limit:
        if is_prime[p]:
            for i in range(p * p, limit + 1, p):
                is_prime[i] = False
        p += 1
    return [p for p in range(2, limit + 1) if is_prime[p]]

def segmented_sieve(m, n):
    if m < 2:
        m = 2
    
    range_size = n - m + 1
    is_prime_range = [True] * range_size
    
    limit = int(n**0.5) + 1
    primes = sieve_of_eratosthenes(limit)

    for prime in primes:
        # Find the minimum number in the [m, n] range that is a multiple of 'prime'
        start = max(prime*prime, m + (prime - m % prime) % prime)
        
        for j in range(start, n + 1, prime):
            is_prime_range[j - m] = False

    return [i for i in range(m, n + 1) if is_prime_range[i - m]]

def main():
    import sys
    input = sys.stdin.read
    data = input().strip().splitlines()
    
    t = int(data[0])
    results = []
    
    for i in range(1,
